import { isStr } from './asserts';

type EventMapMap = [
	[AbortSignal, AbortSignalEventMap],
	[AbstractWorker, AbstractWorkerEventMap],
	[Animation, AnimationEventMap],
	[AudioBufferSourceNode, AudioScheduledSourceNodeEventMap],
	[AudioContext, BaseAudioContextEventMap],
	[AudioScheduledSourceNode, AudioScheduledSourceNodeEventMap],
	[AudioWorkletNode, AudioWorkletNodeEventMap],
	[BaseAudioContext, BaseAudioContextEventMap],
	[BroadcastChannel, BroadcastChannelEventMap],
	[CSSAnimation, AnimationEventMap],
	[CSSTransition, AnimationEventMap],
	[CanvasCaptureMediaStreamTrack, MediaStreamTrackEventMap],
	[ConstantSourceNode, AudioScheduledSourceNodeEventMap],
	[Document, DocumentEventMap],
	[Element, ElementEventMap],
	[EventSource, EventSourceEventMap],
	[FileReader, FileReaderEventMap],
	[FontFaceSet, FontFaceSetEventMap],
	[GlobalEventHandlers, GlobalEventHandlersEventMap],
	[HTMLAnchorElement, HTMLElementEventMap],
	[HTMLAreaElement, HTMLElementEventMap],
	[HTMLAudioElement, HTMLMediaElementEventMap],
	[HTMLBRElement, HTMLElementEventMap],
	[HTMLBaseElement, HTMLElementEventMap],
	[HTMLBodyElement, HTMLBodyElementEventMap],
	[HTMLButtonElement, HTMLElementEventMap],
	[HTMLCanvasElement, HTMLElementEventMap],
	[HTMLDListElement, HTMLElementEventMap],
	[HTMLDataElement, HTMLElementEventMap],
	[HTMLDataListElement, HTMLElementEventMap],
	[HTMLDetailsElement, HTMLElementEventMap],
	[HTMLDialogElement, HTMLElementEventMap],
	[HTMLDirectoryElement, HTMLElementEventMap],
	[HTMLDivElement, HTMLElementEventMap],
	[HTMLDocument, DocumentEventMap],
	[HTMLElement, HTMLElementEventMap],
	[HTMLEmbedElement, HTMLElementEventMap],
	[HTMLFieldSetElement, HTMLElementEventMap],
	[HTMLFontElement, HTMLElementEventMap],
	[HTMLFormElement, HTMLElementEventMap],
	[HTMLFrameElement, HTMLElementEventMap],
	[HTMLFrameSetElement, HTMLFrameSetElementEventMap],
	[HTMLHRElement, HTMLElementEventMap],
	[HTMLHeadElement, HTMLElementEventMap],
	[HTMLHeadingElement, HTMLElementEventMap],
	[HTMLHtmlElement, HTMLElementEventMap],
	[HTMLIFrameElement, HTMLElementEventMap],
	[HTMLImageElement, HTMLElementEventMap],
	[HTMLInputElement, HTMLElementEventMap],
	[HTMLLIElement, HTMLElementEventMap],
	[HTMLLabelElement, HTMLElementEventMap],
	[HTMLLegendElement, HTMLElementEventMap],
	[HTMLLinkElement, HTMLElementEventMap],
	[HTMLMapElement, HTMLElementEventMap],
	[HTMLMarqueeElement, HTMLElementEventMap],
	[HTMLMediaElement, HTMLMediaElementEventMap],
	[HTMLMenuElement, HTMLElementEventMap],
	[HTMLMetaElement, HTMLElementEventMap],
	[HTMLMeterElement, HTMLElementEventMap],
	[HTMLModElement, HTMLElementEventMap],
	[HTMLOListElement, HTMLElementEventMap],
	[HTMLObjectElement, HTMLElementEventMap],
	[HTMLOptGroupElement, HTMLElementEventMap],
	[HTMLOptionElement, HTMLElementEventMap],
	[HTMLOutputElement, HTMLElementEventMap],
	[HTMLParagraphElement, HTMLElementEventMap],
	[HTMLParamElement, HTMLElementEventMap],
	[HTMLPictureElement, HTMLElementEventMap],
	[HTMLPreElement, HTMLElementEventMap],
	[HTMLProgressElement, HTMLElementEventMap],
	[HTMLQuoteElement, HTMLElementEventMap],
	[HTMLScriptElement, HTMLElementEventMap],
	[HTMLSelectElement, HTMLElementEventMap],
	[HTMLSlotElement, HTMLElementEventMap],
	[HTMLSourceElement, HTMLElementEventMap],
	[HTMLSpanElement, HTMLElementEventMap],
	[HTMLStyleElement, HTMLElementEventMap],
	[HTMLTableCaptionElement, HTMLElementEventMap],
	[HTMLTableCellElement, HTMLElementEventMap],
	[HTMLTableColElement, HTMLElementEventMap],
	[HTMLTableDataCellElement, HTMLElementEventMap],
	[HTMLTableElement, HTMLElementEventMap],
	[HTMLTableHeaderCellElement, HTMLElementEventMap],
	[HTMLTableRowElement, HTMLElementEventMap],
	[HTMLTableSectionElement, HTMLElementEventMap],
	[HTMLTemplateElement, HTMLElementEventMap],
	[HTMLTextAreaElement, HTMLElementEventMap],
	[HTMLTimeElement, HTMLElementEventMap],
	[HTMLTitleElement, HTMLElementEventMap],
	[HTMLTrackElement, HTMLElementEventMap],
	[HTMLUListElement, HTMLElementEventMap],
	[HTMLUnknownElement, HTMLElementEventMap],
	[HTMLVideoElement, HTMLVideoElementEventMap],
	[IDBDatabase, IDBDatabaseEventMap],
	[IDBOpenDBRequest, IDBOpenDBRequestEventMap],
	[IDBRequest, IDBRequestEventMap],
	[IDBTransaction, IDBTransactionEventMap],
	[MIDIAccess, MIDIAccessEventMap],
	[MIDIInput, MIDIInputEventMap],
	[MIDIOutput, MIDIPortEventMap],
	[MIDIPort, MIDIPortEventMap],
	[MathMLElement, MathMLElementEventMap],
	[MediaDevices, MediaDevicesEventMap],
	[MediaKeySession, MediaKeySessionEventMap],
	[MediaQueryList, MediaQueryListEventMap],
	[MediaRecorder, MediaRecorderEventMap],
	[MediaSource, MediaSourceEventMap],
	[MediaStream, MediaStreamEventMap],
	[MediaStreamTrack, MediaStreamTrackEventMap],
	[MessagePort, MessagePortEventMap],
	[Notification, NotificationEventMap],
	[OfflineAudioContext, OfflineAudioContextEventMap],
	[OffscreenCanvas, OffscreenCanvasEventMap],
	[OscillatorNode, AudioScheduledSourceNodeEventMap],
	[PaymentRequest, PaymentRequestEventMap],
	[Performance, PerformanceEventMap],
	[PermissionStatus, PermissionStatusEventMap],
	[PictureInPictureWindow, PictureInPictureWindowEventMap],
	[RTCDTMFSender, RTCDTMFSenderEventMap],
	[RTCDataChannel, RTCDataChannelEventMap],
	[RTCDtlsTransport, RTCDtlsTransportEventMap],
	[RTCIceTransport, RTCIceTransportEventMap],
	[RTCPeerConnection, RTCPeerConnectionEventMap],
	[RTCSctpTransport, RTCSctpTransportEventMap],
	[RemotePlayback, RemotePlaybackEventMap],
	[SVGAElement, SVGElementEventMap],
	[SVGAnimateElement, SVGElementEventMap],
	[SVGAnimateMotionElement, SVGElementEventMap],
	[SVGAnimateTransformElement, SVGElementEventMap],
	[SVGAnimationElement, SVGElementEventMap],
	[SVGCircleElement, SVGElementEventMap],
	[SVGClipPathElement, SVGElementEventMap],
	[SVGComponentTransferFunctionElement, SVGElementEventMap],
	[SVGDefsElement, SVGElementEventMap],
	[SVGDescElement, SVGElementEventMap],
	[SVGElement, SVGElementEventMap],
	[SVGEllipseElement, SVGElementEventMap],
	[SVGFEBlendElement, SVGElementEventMap],
	[SVGFEColorMatrixElement, SVGElementEventMap],
	[SVGFEComponentTransferElement, SVGElementEventMap],
	[SVGFECompositeElement, SVGElementEventMap],
	[SVGFEConvolveMatrixElement, SVGElementEventMap],
	[SVGFEDiffuseLightingElement, SVGElementEventMap],
	[SVGFEDisplacementMapElement, SVGElementEventMap],
	[SVGFEDistantLightElement, SVGElementEventMap],
	[SVGFEDropShadowElement, SVGElementEventMap],
	[SVGFEFloodElement, SVGElementEventMap],
	[SVGFEFuncAElement, SVGElementEventMap],
	[SVGFEFuncBElement, SVGElementEventMap],
	[SVGFEFuncGElement, SVGElementEventMap],
	[SVGFEFuncRElement, SVGElementEventMap],
	[SVGFEGaussianBlurElement, SVGElementEventMap],
	[SVGFEImageElement, SVGElementEventMap],
	[SVGFEMergeElement, SVGElementEventMap],
	[SVGFEMergeNodeElement, SVGElementEventMap],
	[SVGFEMorphologyElement, SVGElementEventMap],
	[SVGFEOffsetElement, SVGElementEventMap],
	[SVGFEPointLightElement, SVGElementEventMap],
	[SVGFESpecularLightingElement, SVGElementEventMap],
	[SVGFESpotLightElement, SVGElementEventMap],
	[SVGFETileElement, SVGElementEventMap],
	[SVGFETurbulenceElement, SVGElementEventMap],
	[SVGFilterElement, SVGElementEventMap],
	[SVGForeignObjectElement, SVGElementEventMap],
	[SVGGElement, SVGElementEventMap],
	[SVGGeometryElement, SVGElementEventMap],
	[SVGGradientElement, SVGElementEventMap],
	[SVGGraphicsElement, SVGElementEventMap],
	[SVGImageElement, SVGElementEventMap],
	[SVGLineElement, SVGElementEventMap],
	[SVGLinearGradientElement, SVGElementEventMap],
	[SVGMPathElement, SVGElementEventMap],
	[SVGMarkerElement, SVGElementEventMap],
	[SVGMaskElement, SVGElementEventMap],
	[SVGMetadataElement, SVGElementEventMap],
	[SVGPathElement, SVGElementEventMap],
	[SVGPatternElement, SVGElementEventMap],
	[SVGPolygonElement, SVGElementEventMap],
	[SVGPolylineElement, SVGElementEventMap],
	[SVGRadialGradientElement, SVGElementEventMap],
	[SVGRectElement, SVGElementEventMap],
	[SVGSVGElement, SVGSVGElementEventMap],
	[SVGScriptElement, SVGElementEventMap],
	[SVGSetElement, SVGElementEventMap],
	[SVGStopElement, SVGElementEventMap],
	[SVGStyleElement, SVGElementEventMap],
	[SVGSwitchElement, SVGElementEventMap],
	[SVGSymbolElement, SVGElementEventMap],
	[SVGTSpanElement, SVGElementEventMap],
	[SVGTextContentElement, SVGElementEventMap],
	[SVGTextElement, SVGElementEventMap],
	[SVGTextPathElement, SVGElementEventMap],
	[SVGTextPositioningElement, SVGElementEventMap],
	[SVGTitleElement, SVGElementEventMap],
	[SVGUseElement, SVGElementEventMap],
	[SVGViewElement, SVGElementEventMap],
	[ScreenOrientation, ScreenOrientationEventMap],
	[ScriptProcessorNode, ScriptProcessorNodeEventMap],
	[ServiceWorker, ServiceWorkerEventMap],
	[ServiceWorkerContainer, ServiceWorkerContainerEventMap],
	[ServiceWorkerRegistration, ServiceWorkerRegistrationEventMap],
	[ShadowRoot, ShadowRootEventMap],
	[SharedWorker, AbstractWorkerEventMap],
	[SourceBuffer, SourceBufferEventMap],
	[SourceBufferList, SourceBufferListEventMap],
	[SpeechSynthesis, SpeechSynthesisEventMap],
	[SpeechSynthesisUtterance, SpeechSynthesisUtteranceEventMap],
	[TextTrack, TextTrackEventMap],
	[TextTrackCue, TextTrackCueEventMap],
	[TextTrackList, TextTrackListEventMap],
	[VTTCue, TextTrackCueEventMap],
	[VideoDecoder, VideoDecoderEventMap],
	[VideoEncoder, VideoEncoderEventMap],
	[VisualViewport, VisualViewportEventMap],
	[WakeLockSentinel, WakeLockSentinelEventMap],
	[WebSocket, WebSocketEventMap],
	[Window, WindowEventMap],
	[WindowEventHandlers, WindowEventHandlersEventMap],
	[Worker, WorkerEventMap],
	[XMLDocument, DocumentEventMap],
	[XMLHttpRequest, XMLHttpRequestEventMap],
	[XMLHttpRequestEventTarget, XMLHttpRequestEventTargetEventMap],
	[XMLHttpRequestUpload, XMLHttpRequestEventTargetEventMap]
];

export type IndexEventType<
	T,
	Ary extends EventMapMap = EventMapMap,
	Results = never,
	TDepth extends never[] = []
> = TDepth['length'] extends Ary['length']
	? Results
	: IndexEventType<
			T,
			Ary,
			Results | (T extends Ary[TDepth['length']][0] ? keyof Ary[TDepth['length']][1] : never),
			[...TDepth, never]
		>;

export type IndexEvent<
	T,
	Ary extends EventMapMap = EventMapMap,
	TDepth extends never[] = []
> = TDepth['length'] extends Ary['length']
	? never
	: T extends Ary[TDepth['length']][0]
		? Ary[TDepth['length']][0] extends T
			? Ary[TDepth['length']][1]
			: IndexEvent<T, Ary, [...TDepth, never]>
		: IndexEvent<T, Ary, [...TDepth, never]>;

type MustEvent<T, K extends IndexEventType<T>> =
	IndexEvent<T> extends { [key in K]: unknown } ? IndexEvent<T>[K] : never;

export function listen<T extends EventTarget, K extends IndexEventType<T> = IndexEventType<T>>(
	[target, type, options]: [T, K, AddEventListenerOptions?],
	listener: (event: MustEvent<T, K>) => unknown
): () => void;
export function listen<T = Window, K extends IndexEventType<T> = IndexEventType<T>>(
	[type, options]: [K, AddEventListenerOptions?],
	listener: (event: MustEvent<T, K>) => unknown
): () => void;
export function listen<
	T extends EventTarget = Window,
	K extends IndexEventType<T> = IndexEventType<T>
>(
	args: [T, K, AddEventListenerOptions?] | [K, AddEventListenerOptions?],
	listener: (event: MustEvent<T, K>) => unknown
) {
	const [target, type, options] = (isStr(args[0]) ? [window, ...args] : args) as [
		T,
		K,
		AddEventListenerOptions?
	];
	target.addEventListener(type, listener as EventListener, options);
	return function clean() {
		target.removeEventListener(type, listener as EventListener, options);
	};
}
